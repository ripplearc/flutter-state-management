workflows:
  publish-ios-qa:
    name: Publish iOS QA
    max_build_duration: 60
    environment:
      groups:
        - app_store
        - app_store_credentials
        - match
      flutter: 3.7.12
      xcode: 14.3
      cocoapods: default
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache          # Dart cache
        - $HOME/Library/Caches/CocoaPods    # CocoaPods cache
    triggering:
      events:
        # publish only tagged commits to main:
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: false
    scripts:
      - &increment_testflight_build_number
        name: Get the latest build number
        script: |
          LATEST_BUILD_NUMBER=$(app-store-connect get-latest-testflight-build-number $APP_APPLE_ID --pre-release-version 0.0.2)
          cd ./ios # avgtool must run in the folder where xcodeproj file is located, to edit the xcconfig file
          agvtool new-version -all $(($LATEST_BUILD_NUMBER + 1)) 
          BUILD_NUMBER=$(($(app-store-connect get-latest-testflight-build-number $APP_APPLE_ID --pre-release-version 0.0.2) + 1))
          #!/bin/sh
          set -ex
          printenv
        ignore_failure: false
      - &build_ios_app
        name: Build iOS app
        script: |
          bundle install
          bundle exec fastlane setup_keychain
          find . -name "Podfile" -execdir pod install \;
          sh ci/build_ios_qa.sh
    artifacts:
      - build/ios/ipa/*.ipa
      - ./*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - ripplearc@gmail.com
  publish-qa-android:
    name: Publish Android QA
    max_build_duration: 60
    environment:
      groups:
        - google_play
        - keystore_credentials
      flutter: 3.7.12
    cache:
      cache_paths: [ ]
    triggering:
      events:
        # publish only tagged commits to main:
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: false
    scripts:
      - &set_up_key_store_and_properties
        name: Set up release keystore, key.properties, local.properties
        script: |
          echo $GOOGLE_PLAY_JSON | base64 --decode > google_play.json
          echo $ANDROID_KEYSTORE | base64 --decode > "$FCI_BUILD_DIR/android/app/randomword-release.keystore"
          echo $ANDROID_KEY_PROPERTIES | base64 --decode > "$FCI_BUILD_DIR/android/key.properties"
          echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - &increment_google_play_build_number_and_build_android_app
        name: Build the release app with the latest build number from Google Play
        script: |
          LATEST_GOOGLE_PLAY_BUILD_NUMBER=$(google-play get-latest-build-number --package-name 'com.ripplearc.composerandomwords' --verbose)
          echo INCREMENT_GOOGLE_PLAY_BUILD_NUMBER: $INCREMENT_GOOGLE_PLAY_BUILD_NUMBER
          bundle install
          bundle exec fastlane android deploy build_number:$((LATEST_GOOGLE_PLAY_BUILD_NUMBER+1))
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - ripplearc@gmail.com
  publish-qa:
    name: Publish QA
    max_build_duration: 60
    environment:
      groups:
        - match
        - app_store
        - app_store_credentials
        - google_play
        - keystore_credentials
      flutter: 3.7.12
      xcode: 14.3
      cocoapods: default
    cache:
      cache_paths: [ ]
    triggering:
      events:
        # publish only tagged commits to main:
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: false
    scripts:
      - *set_up_key_store_and_properties
      - *increment_google_play_build_number_and_build_android_app
      - *increment_testflight_build_number
      - *build_ios_app
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - ./*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - ripplearc@gmail.com
  unit-and-widget-tests:
    name: Unit & Widget Tests
    max_build_duration: 60
    environment:
      flutter: 3.7.12
      xcode: 14.3
      cocoapods: default
    cache:
      cache_paths: [ ]
    triggering:
      events:
        # test each PR to main:
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: false
    scripts:
      - |
        # set up local properties
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - &run_unit_tests
        name: Run unit and widget tests
        script: |
          mkdir -p test-results
          bundle install
          bundle exec fastlane run_unit_widget_tests test_report_path:test-results/unit_tests.json
        test_report: test-results/unit_tests.json
    publishing:
      email:
        recipients:
          - ripplearc@gmail.com
  integration-tests:
    ### How to trigger the UI tests
    ### How to run code coverage?
    ### Combine iOS and Web tests into one workflow because the Preparing build machine
    ### takes close to 1 minute while the test execution takes 2 minutes or less.artifacts:
    ### When the tests execution outweighs the build preparation time, it makes sense to split them.
    ### By splitting them, we can rerun them individually in the case of flaky tests.
    name: iOS and Web Integration Tests
    max_build_duration: 60
    environment:
      flutter: 3.7.12
      xcode: 14.3
      cocoapods: default
    cache:
      cache_paths: [ ]
    triggering:
      events:
        # test each PR to main:
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: false
    scripts:
      - &run_ios_integration_tests
        name: Flutter integration tests (iOS)
        script: |
          mkdir -p test-results
          bundle install
          bundle exec fastlane run_ios_integration_tests test_report_path:test-results/integration_tests.json
        test_report: test-results/integration_tests.json
      - &run_web_chrome_integration_tests
        name: Flutter integration tests (Chrome)
        script: |
          bundle install
          bundle exec fastlane run_web_chrome_integration_tests port:4444
      - &run_web_safari_integration_tests
        name: Flutter integration tests (Safari)
        script: |
          bundle install
          bundle exec fastlane run_web_safari_integration_tests port:5555
    publishing:
      email:
        recipients:
          - ripplearc@gmail.com